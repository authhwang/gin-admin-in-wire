// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"context"
	"github.com/authhwang/gin-admin/internal/app/bll/impl/internal"
	"github.com/authhwang/gin-admin/internal/app/config"
	"github.com/authhwang/gin-admin/internal/app/model/impl/gorm/internal/model"
	"github.com/authhwang/gin-admin/internal/app/routers/api/ctl"
	"github.com/casbin/casbin"
	"github.com/jinzhu/gorm"
)

// Injectors from inject.go:

func InitDataStore(ctx context.Context, db *gorm.DB) error {
	enforcer := NewEnforcer()
	role := model.NewRole(db)
	menu := model.NewMenu(db)
	user := model.NewUser(db)
	internalRole := internal.NewRole(enforcer, role, menu, user)
	internalUser := internal.NewUser(enforcer, user, role)
	trans := model.NewTrans(db)
	internalTrans := internal.NewTrans(trans)
	internalMenu := internal.NewMenu(trans, menu)
	error2 := InitData(ctx, internalRole, internalUser, internalTrans, internalMenu)
	return error2
}

func InitWebFunc(ctx context.Context, db *gorm.DB) (func(), error) {
	auther, err := InitAuth()
	if err != nil {
		return nil, err
	}
	enforcer := NewEnforcer()
	demo := model.NewDemo(db)
	internalDemo := internal.NewDemo(demo)
	ctlDemo := ctl.NewDemo(internalDemo)
	user := model.NewUser(db)
	role := model.NewRole(db)
	menu := model.NewMenu(db)
	login := internal.NewLogin(auther, user, role, menu)
	ctlLogin := ctl.NewLogin(login)
	trans := model.NewTrans(db)
	internalMenu := internal.NewMenu(trans, menu)
	ctlMenu := ctl.NewMenu(internalMenu)
	internalRole := internal.NewRole(enforcer, role, menu, user)
	ctlRole := ctl.NewRole(internalRole)
	internalUser := internal.NewUser(enforcer, user, role)
	ctlUser := ctl.NewUser(internalUser)
	v := InitHTTPServer(ctx, auther, enforcer, ctlDemo, ctlLogin, ctlMenu, ctlRole, ctlUser)
	return v, nil
}

// inject.go:

var c *casbin.Enforcer

func NewEnforcer() *casbin.Enforcer {
	cfg := config.Global()
	if c == nil {
		c = casbin.NewEnforcer(cfg.CasbinModelConf, false)
	}
	return c
}
